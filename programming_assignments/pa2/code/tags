!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
L	List.h	/^void delete(List L);$/;"	v
List	List.c	/^struct List {$/;"	s	file:
List	List.h	/^typedef struct List List;$/;"	t	typeref:struct:List
__LIST	List.h	5;"	d
append	List.c	/^void append(List L, int data) { \/\/FIXME fails if L.front is NULL$/;"	f
back	List.c	/^   node *back;$/;"	m	struct:List	file:
back	List.c	/^int back(List L) { $/;"	f
clear	List.c	/^void clear(List L) { $/;"	f
concatList	List.c	/^List concatList(List A, List B) {$/;"	f
copyList	List.c	/^List copyList(List L) {$/;"	f
cursor	List.c	/^   node *cursor;$/;"	m	struct:List	file:
data	List.c	/^   int data;$/;"	m	struct:node	file:
delete	List.c	/^void delete(List L) {$/;"	f
deleteBack	List.c	/^void deleteBack(List L) {$/;"	f
deleteFront	List.c	/^void deleteFront(List L) {$/;"	f
equals	List.c	/^int equals(List A, List B) {  $/;"	f
error	List.c	/^static void error(char *function, char *message) {$/;"	f	file:
freeList	List.c	/^void freeList(List *pL){$/;"	f
front	List.c	/^   node *front;$/;"	m	struct:List	file:
front	List.c	/^int front(List L) { $/;"	f
get	List.c	/^int get(List L) { $/;"	f
index	List.c	/^   int index;$/;"	m	struct:List	file:
index	List.c	/^int index(List L) {$/;"	f
insertAfter	List.c	/^void insertAfter(List L, int data) {$/;"	f
insertBefore	List.c	/^void insertBefore(List L, int data) {$/;"	f
length	List.c	/^   int length;$/;"	m	struct:List	file:
length	List.c	/^int length(List L){ $/;"	f
main	Lex.c	/^int main(void) {$/;"	f
main	ListClient.c	/^int main(int argc, char* argv[]){$/;"	f
moveBack	List.c	/^void moveBack(List L) {$/;"	f
moveFront	List.c	/^void moveFront(List L) { $/;"	f
moveNext	List.c	/^void moveNext(List L) {$/;"	f
movePrev	List.c	/^void movePrev(List L) { $/;"	f
newList	List.c	/^List newList(void) {$/;"	f
newNode	List.c	/^node *newNode(void) {$/;"	f
next	List.c	/^   struct node *next;$/;"	m	struct:node	typeref:struct:node::node	file:
node	List.c	/^struct node {$/;"	s	file:
node	List.c	/^typedef struct node node;$/;"	t	typeref:struct:node	file:
prepend	List.c	/^void prepend(List L, int data) { \/\/FIXME fails if L.front is NULL$/;"	f
prev	List.c	/^   node *prev;$/;"	m	struct:node	file:
printList	List.c	/^void printList(FILE *out, List L) {$/;"	f
std	Makefile	/^	gcc -c -std=c99 -Wall Lex.c$/;"	m
std	Makefile	/^	gcc -c -std=c99 -Wall List.c$/;"	m
std	Makefile	/^	gcc -c -std=c99 -Wall ListClient.c$/;"	m
